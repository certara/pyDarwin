this_model = 1
xml_file <- list.files(file.path(sourceFolder, this_gen, this_model),
pattern = "\\.xml",
full.names = TRUE)
parms <- GetNMParms(xml_file)
parms
xml_file
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^ MONITORING OF SEARCH:",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[pos1:pos2]
lst
pos1 <- grep("^ GRADIENT",lst)[1]
pos1 <- grep("^ GRADIENT",lst)[1]
pos2 <- grep("^0ITERATION NO.:",lst)[1]
grd <- lst[pos1:(pos2-1)]
grd
grd <- str_replace(grd," GRADIENT:   ","")
grd <- paste0(grd, collapse = "")
while(grepl("  ", grd, fixed = TRUE)){
grd <- str_replace(grd,"  "," ")
}
grd <- unlist(str_split(grd," "))
grd
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^ MONITORING OF SEARCH:",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[pos1:pos2]
lst
pos1 <- grep("^ GRADIENT",lst)[1]
pos2 <- grep("^0ITERATION NO.:",lst)[1]
grd <- lst[pos1:(pos2-1)]
grd
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^ MONITORING OF SEARCH:",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[pos1:pos2]
lst
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^ MONITORING OF SEARCH:",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[pos1:pos2]
pos1 <- grep("^0ITERATION NO.:    0",lst)[1]
pos2 <- grep("^0ITERATION NO.:",lst)[2]
grd <- lst[pos1:(pos2-1)]
grd
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^ MONITORING OF SEARCH:",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[pos1:pos2]
pos1 <- grep("^ GRADIENT",lst)[1]
lst <- lst{pos1:length(lst)}
lst
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^ MONITORING OF SEARCH:",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[pos1:pos2]
pos1 <- grep("^ GRADIENT",lst)[1]
lst <- lst[(pos1+1):length(lst)]
lst
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^ MONITORING OF SEARCH:",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[pos1:pos2]
pos1 <- grep("^ GRADIENT",lst)[1]
lst <- lst[(pos1+1):length(lst)]
lst
pos1
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^ MONITORING OF SEARCH:",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[pos1:pos2]
lst
pos1 <- grep("^ GRADIENT",lst)[1]
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^0ITERATION NO.: ",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[pos1:pos2]
lst
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^0ITERATION NO.: ",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[(pos1+1):pos2]
lst
pos1 <- grep("^ GRADIENT",lst)[1]
pos2 <- grep("^0ITERATION NO.:",lst)[1]
grd <- lst[pos1:(pos2-1)]
grd
grd <- lst[pos1:(pos2-1)]
grd <- str_replace(grd," GRADIENT:   ","")
grd <- paste0(grd, collapse = "")
while(grepl("  ", grd, fixed = TRUE)){
grd <- str_replace(grd,"  "," ")
}
grd
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^0ITERATION NO.: ",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[(pos1+1):pos2]
pos1 <- grep("^ GRADIENT",lst)[1]
pos2 <- grep("^0ITERATION NO.:",lst)[1]
grd <- lst[pos1:(pos2-1)]
grd <- str_replace(grd,"GRADIENT:   ","")
grd <- paste0(grd, collapse = "")
grd
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^0ITERATION NO.: ",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[(pos1+1):pos2]
pos1 <- grep("^ GRADIENT",lst)[1]
pos2 <- grep("^0ITERATION NO.:",lst)[1]
grd <- lst[pos1:(pos2-1)]
grd <- str_replace(grd,"GRADIENT: ","")
grd <- paste0(grd, collapse = "")
grd
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^0ITERATION NO.: ",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[(pos1+1):pos2]
pos1 <- grep("^ GRADIENT",lst)[1]
pos2 <- grep("^0ITERATION NO.:",lst)[1]
grd <- lst[pos1:(pos2-1)]
grd <- str_replace(grd,"GRADIENT:","")
grd <- paste0(grd, collapse = "")
grd
while(grepl("  ", grd, fixed = TRUE)){
grd <- str_replace(grd,"  "," ")
}
grd
grd <- str_trim(grd)
grd
lstfile <- str_replace(xml_file,"\\.xml",".lst")
lst <- readtext::readtext(lstfile, verbosity = 0)$text
lst <- unlist(str_split(lst,"\n"))
pos1 <- grep("^0ITERATION NO.: ",lst)
pos2 <- grep("^ #TERM:" ,lst)
lst <- lst[(pos1+1):pos2]
pos1 <- grep("^ GRADIENT",lst)[1]
pos2 <- grep("^0ITERATION NO.:",lst)[1]
grd <- lst[pos1:(pos2-1)]
grd <- str_replace(grd,"GRADIENT:","")
grd <- paste0(grd, collapse = "")
while(grepl("  ", grd, fixed = TRUE)){
grd <- str_replace(grd,"  "," ")
}
grd <- str_trim(grd)
grd <- unlist(str_split(grd," "))
grd
grd <- unlist(str_split(grd," "))
n_estimated_parms <- length(grd)
n_estimated_parms
source("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
sourceFolder
data <- data.frame(Generation = as.integer(),
Model = as.integer(),
OFV = as.numeric(),
n_estimated_Parms = as.integer(),
Success = as.logical(),
Covar = as.logical())
Generations <- list.files(sourceFolder)
this_gen = 2
for(this_gen in Generations){
models <- list.files(file.path(sourceFolder,this_gen))
this_model = 1
for(this_model in models){
xml_file <- list.files(file.path(sourceFolder, this_gen, this_model),
pattern = "\\.xml",
full.names = TRUE)
parms <- GetNMParms(xml_file)
OFV <- parms$OFV
n_estimated_Parms <- parms$n_estimated_parms
Success <- parms$success
Covar <- parms$covar
this_data <- data.frame(Generation = this_gen,
Model = this_model,
OFV = OFV,
n_estimated_Parms = n_estimated_Parms,
Success = Success,
Covar = Covar)
data <- rbind(data,this_data)
}
}
data <- data %>% group_by(Generation)
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point()+
geom_line() +
scale_x_continuous(breaks=c(2,4,6,8,10,12,14,16,18))
min_parms <- min(data$n_estimated_Parms)
max_parms <- maxA(data$n_estimated_Parms)
min_parms % 2
min_parms %% 2
min_parms <- min(data$n_estimated_Parms)
max_parms <- maxA(data$n_estimated_Parms)
if((min_parms %% 2) == 1) min_parms <- min_parms - 1
seq(min_parms,max_parms)
min_parms <- min(data$n_estimated_Parms)
max_parms <- maxA(data$n_estimated_Parms)
if((min_parms %% 2) == 1) min_parms <- min_parms - 1
if((max_parms %% 2) == 1) max_parms <- max_parms + 1
max_parms <- max(data$n_estimated_Parms)
if((min_parms %% 2) == 1) min_parms <- min_parms - 1
if((max_parms %% 2) == 1) max_parms <- max_parms + 1
seq(min_parms,max_parms)
seq(min_parms,max_parms,2)
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point()+
geom_line() +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Paramegters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point()+
geom_line() +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
data
data <- data %>% group_by(Generation,Covar,Success)
min_parms <- min(data$n_estimated_Parms)
max_parms <- max(data$n_estimated_Parms)
if((min_parms %% 2) == 1) min_parms <- min_parms - 1
if((max_parms %% 2) == 1) max_parms <- max_parms + 1
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point()+
geom_line() +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation,, size = Covar)) +
geom_point()+
geom_line() +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point()+
geom_line() +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point(size= Covar)+
geom_line() +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point()+
geom_line() +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point(shape= Covar)+
geom_line() +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
data
View(data)
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point(color= Covar)+
geom_line() +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point(color = Covar)+
scale_color_manual(values = c(TRUE = "red", FALSE = "green"))
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point(color = Covar)+
scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point(color = Covar)+
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "green")) +
geom_line() +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point(color = Covar)+
scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point(aes(group = Covar))+
scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
ggplot(data,aes(x=n_estimated_Parms,y=OFV, color = Generation)) +
geom_point(aes(group = Covar))
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(group = Covar))+
scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(group = Covar))+
scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(group = Covar))+
# scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(group = Covar))+
scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(group = Covar))+
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "green")) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(group = Covar))+
scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(group = Covar))+
scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar))+
#scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
scale_shape_manual
?scale_shape_manual
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar))+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values = c(TRUE = 1, FALSE = 1)) +
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar))+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
# scale_shape_manual(values = c(TRUE = 1, FALSE = 1)) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar))+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values = c(0 = 1, 1 = 1)) +
shapes <- c(15,18,16,17,19)
names(shapes) <- c(TRUE, FALSE)
shapes <- c(15,18,16,17,19)
names(shapes) <- c(TRUE, FALSE)
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar))+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values=shapes) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
shapes <- c(21,22)
names(shapes) <- c(TRUE, FALSE)
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar))+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values=shapes) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(fill = Success))+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values=shapes) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar, fill = Success))+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values=shapes) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar, fill = Success, size=2))+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values=shapes) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar, fill = Success, size=1.1))+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values=shapes) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar, fill = Success), size=1.1)+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values=shapes) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar, fill = Success), size=2)+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values=shapes) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar, fill = Success, color=Success), size=2)+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values=shapes) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
ggplot(data,aes(x=n_estimated_Parms, y=OFV)) +
geom_point(aes(shape = Covar, fill = Success), size=2)+
#  scale_color_manual(values = c(TRUE = "red", FALSE = "green")) +
scale_shape_manual(values=shapes) +
geom_line(aes(color = Generation )) +
scale_x_continuous(breaks=seq(min_parms,max_parms,2))+
xlab("Number of Estimated Parameters")+
ylab("OFV (-2LL)")
source("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/MakeFrontPlot.R", echo=TRUE)
sourceFolder
MakeFrontPlot(sourceFolder)
warnings()
pos1 <- grep("^0ITERATION NO.: ",lst)
xml_file
source("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
parms <- ReadXML(xml_file)
parms
xml_file
sourceFolder
data <- data.frame(Generation = as.integer(),
Model = as.integer(),
OFV = as.numeric(),
n_estimated_Parms = as.integer(),
Success = as.logical(),
Covar = as.logical())
Generations <- list.files(sourceFolder)
this_gen = 2
models <- list.files(file.path(sourceFolder,this_gen))
this_model = 1
xml_file <- list.files(file.path(sourceFolder, this_gen, this_model),
pattern = "\\.xml",
full.names = TRUE)
parms <- ReadXML(xml_file)
pos1
pos2
pos1 <- grep("^0ITERATION NO.: ",lst)
pos1
debugSource("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
parms <- ReadXML(xml_file)
debugSource("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
MakeFrontPlot(sourceFolder)
warnings()
debugSource("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
MakeFrontPlot(sourceFolder)
warnings()
debugSource("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
debugSource("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
debugSource("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
debugSource("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
debugSource("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
debugSource("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
parms <- ReadXML(xml_file)
source("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.R", echo=TRUE)
parms <- ReadXML(xml_file)
MakeFrontPlot(sourceFolder)
rm(list=ls())
setwd("c:/Users/msale/pydarwin/MOGA2/non_dominated_models")
sourceFolder <- "c:/Users/msale/pydarwin/MOGA2/non_dominated_models"
source("c:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/GetNMParms.r")
library(ggplot2)
MakeFrontPlot(sourceFolder)
source("C:/git/pyDarwin/examples/NONMEM/user/MOGAPlots/MakeFrontPlot.R", echo=TRUE)
MakeFrontPlot(sourceFolder)
MakeFrontPlot(sourceFolder)
MakeFrontPlot(sourceFolder)
MakeFrontPlot(sourceFolder)
MakeFrontPlot(sourceFolder)
